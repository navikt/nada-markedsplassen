name: For call - build and deploy backend

on:
  workflow_call:
    inputs:
      deploy_env:
        description: "Deploy environment, e.g. dev-only, prod-only, prod-and-dev"
        required: true
        type: string
      project_id: 
        description: "NAIS parameter"
        required: true
        type: string
      notest:
        description: "bypass test"
        required: true
        type: string
env:
  CI: true

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  golangci:
    env:
      CGO_ENABLED: 1
      CXX: clang++
      CC: clang
      CGO_CXXFLAGS: -Wno-everything
      CGO_LDFLAGS: -Wno-everything
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.55.2

  staticchecks:
    env:
      CGO_ENABLED: 1
      CXX: clang++
      CC: clang
      CGO_CXXFLAGS: -Wno-everything
      CGO_LDFLAGS: -Wno-everything
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - uses: dominikh/staticcheck-action@v1
        with:
          version: "latest"
          install-go: false

  test-containers:
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - id: auth
        name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          token_format: access_token
          workload_identity_provider: projects/1007056531311/locations/global/workloadIdentityPools/ci-nada-prod/providers/ci-nada-prod
          service_account: ci-nada-images@nada-prod-6977.iam.gserviceaccount.com

      - uses: docker/login-action@v3
        name: Login to Google Artifact Registry
        with:
          registry: europe-north1-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: Check if images exist
        id: check-images
        run: |
          set +e
          make check-images
          echo "exit_code=$?" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Build and push all images
        if: ${{ steps.check-images.outputs.exit_code != 0 }}
        run: make build-push-all
  tests:
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    needs:
    - test-containers
    steps:
      - id: checkout
        uses: actions/checkout@v4
      - id: auth
        name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          token_format: access_token
          workload_identity_provider: projects/1007056531311/locations/global/workloadIdentityPools/ci-nada-prod/providers/ci-nada-prod
          service_account: ci-nada-images@nada-prod-6977.iam.gserviceaccount.com
      - uses: docker/login-action@v3
        name: Login to Google Artifact Registry
        with:
          registry: europe-north1-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}
      - id: check-images
        if: ${{ inputs.notest != 'true' }}
        run: make pull-deps pull-metabase-patched
      - id: setup-go
        if: ${{ inputs.notest != 'true' }}
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - id: run-tests
        if: ${{ inputs.notest != 'true' }}
        run: make test
      - name: Upload coverage reports to Codecov
        if: ${{ inputs.notest != 'true' }}
        uses: codecov/codecov-action@v4.5.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  build:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - run: make release
      - uses: actions/upload-artifact@v4
        with:
          name: nada-backend
          path: nada-backend

  push:
    name: Build and push docker image
    permissions:
      contents: write
      id-token: write
    runs-on: ubuntu-latest
    needs: [build,golangci,tests,staticchecks]
    if: github.actor != 'dependabot[bot]'
    outputs:
      image: ${{ steps.docker-build-push.outputs.image }}
    steps:
      - uses: actions/checkout@v4
      - name: Download nada-backend binary
        uses: actions/download-artifact@v4
        with:
          name: nada-backend
      - name: Push docker image to GAR
        uses: nais/docker-build-push@v0
        id: docker-build-push
        with:
          team: nada
          identity_provider: ${{ secrets.NAIS_WORKLOAD_IDENTITY_PROVIDER }}
          project_id: ${{ inputs.project_id }}
          image_suffix: backend
          dockerfile: ./resources/images/nada-backend/Dockerfile

  deploy-dev:
    name: Deploy to dev-gcp
    runs-on: ubuntu-20.04
    needs: [push]
    if: ${{ github.actor != 'dependabot[bot]' && (inputs.deploy_env == 'dev-only' || inputs.deploy_env == 'prod-and-dev') }}
    steps:
      - uses: actions/checkout@v4
      - name: Deploy to dev-gcp
        if: inputs.environment != 'prod'
        uses: nais/deploy/actions/deploy@v2
        env:
          CLUSTER: dev-gcp
          RESOURCE: .nais/dev/nada-backend/nada-backend-config.yaml,.nais/dev/nada-backend/gcp.yaml
          VAR: image=${{ needs.push.outputs.image }}

  deploy-prod:
    name: Deploy to prod-gcp
    runs-on: ubuntu-20.04
    needs: [push]
    if: ${{ github.actor != 'dependabot[bot]' && (inputs.deploy_env == 'prod-only' || inputs.deploy_env == 'prod-and-dev') }}
    steps:
      - uses: actions/checkout@v4
      - name: Deploy to prod-gcp
        uses: nais/deploy/actions/deploy@v2
        env:
          CLUSTER: prod-gcp
          RESOURCE: .nais/prod/nada-backend/nada-backend-config.yaml,.nais/prod/nada-backend/gcp.yaml
          VAR: image=${{ needs.push.outputs.image }}
