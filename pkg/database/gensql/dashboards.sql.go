// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: dashboards.sql

package gensql

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createPublicDashboard = `-- name: CreatePublicDashboard :one
INSERT INTO metabase_dashboard (
    name,
    description,
    "group",
    public_dashboard_id,
    metabase_id,
    created_by,
    keywords,
    teamkatalogen_url,
    team_id
) 
VALUES(
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9
) RETURNING id, name, description, "group", public_dashboard_id, metabase_id, created_by, created, last_modified, tsv_document, keywords, teamkatalogen_url, team_id
`

type CreatePublicDashboardParams struct {
	Name              string
	Description       sql.NullString
	OwnerGroup        string
	PublicDashboardID uuid.UUID
	MetabaseID        int32
	CreatedBy         string
	Keywords          []string
	TeamkatalogenUrl  sql.NullString
	TeamID            uuid.NullUUID
}

func (q *Queries) CreatePublicDashboard(ctx context.Context, arg CreatePublicDashboardParams) (MetabaseDashboard, error) {
	row := q.db.QueryRowContext(ctx, createPublicDashboard,
		arg.Name,
		arg.Description,
		arg.OwnerGroup,
		arg.PublicDashboardID,
		arg.MetabaseID,
		arg.CreatedBy,
		pq.Array(arg.Keywords),
		arg.TeamkatalogenUrl,
		arg.TeamID,
	)
	var i MetabaseDashboard
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Group,
		&i.PublicDashboardID,
		&i.MetabaseID,
		&i.CreatedBy,
		&i.Created,
		&i.LastModified,
		&i.TsvDocument,
		pq.Array(&i.Keywords),
		&i.TeamkatalogenUrl,
		&i.TeamID,
	)
	return i, err
}

const deletePublicDashboard = `-- name: DeletePublicDashboard :exec
DELETE FROM metabase_dashboard
WHERE id = $1
`

func (q *Queries) DeletePublicDashboard(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePublicDashboard, id)
	return err
}

const getDashboard = `-- name: GetDashboard :one
SELECT id, url
FROM "dashboards"
WHERE id = $1
`

func (q *Queries) GetDashboard(ctx context.Context, id uuid.UUID) (Dashboard, error) {
	row := q.db.QueryRowContext(ctx, getDashboard, id)
	var i Dashboard
	err := row.Scan(&i.ID, &i.Url)
	return i, err
}

const getPublicDashboard = `-- name: GetPublicDashboard :one
SELECT id, name, description, "group", public_dashboard_id, metabase_id, created_by, created, last_modified, tsv_document, keywords, teamkatalogen_url, team_id
FROM metabase_dashboard
WHERE id = $1
`

func (q *Queries) GetPublicDashboard(ctx context.Context, id uuid.UUID) (MetabaseDashboard, error) {
	row := q.db.QueryRowContext(ctx, getPublicDashboard, id)
	var i MetabaseDashboard
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Group,
		&i.PublicDashboardID,
		&i.MetabaseID,
		&i.CreatedBy,
		&i.Created,
		&i.LastModified,
		&i.TsvDocument,
		pq.Array(&i.Keywords),
		&i.TeamkatalogenUrl,
		&i.TeamID,
	)
	return i, err
}

const getPublicDashboardsForGroups = `-- name: GetPublicDashboardsForGroups :many
SELECT id, name, description, "group", public_dashboard_id, metabase_id, created_by, created, last_modified, tsv_document, keywords, teamkatalogen_url, team_id
FROM metabase_dashboard
WHERE "group" = ANY($1::text[])
`

func (q *Queries) GetPublicDashboardsForGroups(ctx context.Context, groups []string) ([]MetabaseDashboard, error) {
	rows, err := q.db.QueryContext(ctx, getPublicDashboardsForGroups, pq.Array(groups))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MetabaseDashboard{}
	for rows.Next() {
		var i MetabaseDashboard
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Group,
			&i.PublicDashboardID,
			&i.MetabaseID,
			&i.CreatedBy,
			&i.Created,
			&i.LastModified,
			&i.TsvDocument,
			pq.Array(&i.Keywords),
			&i.TeamkatalogenUrl,
			&i.TeamID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePublicDashboard = `-- name: UpdatePublicDashboard :one
UPDATE metabase_dashboard
SET
    name = $1,
    description = $2,
    keywords = $3,
    teamkatalogen_url = $4,
    team_id = $5
WHERE id = $6
RETURNING id, name, description, "group", public_dashboard_id, metabase_id, created_by, created, last_modified, tsv_document, keywords, teamkatalogen_url, team_id
`

type UpdatePublicDashboardParams struct {
	Name             string
	Description      sql.NullString
	Keywords         []string
	TeamkatalogenUrl sql.NullString
	TeamID           uuid.NullUUID
	ID               uuid.UUID
}

func (q *Queries) UpdatePublicDashboard(ctx context.Context, arg UpdatePublicDashboardParams) (MetabaseDashboard, error) {
	row := q.db.QueryRowContext(ctx, updatePublicDashboard,
		arg.Name,
		arg.Description,
		pq.Array(arg.Keywords),
		arg.TeamkatalogenUrl,
		arg.TeamID,
		arg.ID,
	)
	var i MetabaseDashboard
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Group,
		&i.PublicDashboardID,
		&i.MetabaseID,
		&i.CreatedBy,
		&i.Created,
		&i.LastModified,
		&i.TsvDocument,
		pq.Array(&i.Keywords),
		&i.TeamkatalogenUrl,
		&i.TeamID,
	)
	return i, err
}
