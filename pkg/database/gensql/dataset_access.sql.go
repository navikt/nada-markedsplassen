// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: dataset_access.sql

package gensql

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getAccessToDataset = `-- name: GetAccessToDataset :one
SELECT access_id, access_subject, access_owner, access_granter, access_expires, access_created, access_revoked, access_dataset_id, access_request_id, access_request_owner, access_request_subject, access_request_last_modified, access_request_created, access_request_expires, access_request_status, access_request_closed, access_request_granter, access_request_reason, polly_id, polly_name, polly_url, polly_external_id
FROM dataset_access_view
WHERE access_id = $1
`

func (q *Queries) GetAccessToDataset(ctx context.Context, id uuid.UUID) (DatasetAccessView, error) {
	row := q.db.QueryRowContext(ctx, getAccessToDataset, id)
	var i DatasetAccessView
	err := row.Scan(
		&i.AccessID,
		&i.AccessSubject,
		&i.AccessOwner,
		&i.AccessGranter,
		&i.AccessExpires,
		&i.AccessCreated,
		&i.AccessRevoked,
		&i.AccessDatasetID,
		&i.AccessRequestID,
		&i.AccessRequestOwner,
		&i.AccessRequestSubject,
		&i.AccessRequestLastModified,
		&i.AccessRequestCreated,
		&i.AccessRequestExpires,
		&i.AccessRequestStatus,
		&i.AccessRequestClosed,
		&i.AccessRequestGranter,
		&i.AccessRequestReason,
		&i.PollyID,
		&i.PollyName,
		&i.PollyUrl,
		&i.PollyExternalID,
	)
	return i, err
}

const getActiveAccessToDatasetForSubject = `-- name: GetActiveAccessToDatasetForSubject :one
SELECT access_id, access_subject, access_owner, access_granter, access_expires, access_created, access_revoked, access_dataset_id, access_request_id, access_request_owner, access_request_subject, access_request_last_modified, access_request_created, access_request_expires, access_request_status, access_request_closed, access_request_granter, access_request_reason, polly_id, polly_name, polly_url, polly_external_id
FROM dataset_access_view
WHERE access_dataset_id = $1 
AND access_subject = $2 
AND access_revoked IS NULL 
AND (
  access_expires IS NULL 
  OR access_expires >= NOW()
)
`

type GetActiveAccessToDatasetForSubjectParams struct {
	DatasetID uuid.UUID
	Subject   string
}

func (q *Queries) GetActiveAccessToDatasetForSubject(ctx context.Context, arg GetActiveAccessToDatasetForSubjectParams) (DatasetAccessView, error) {
	row := q.db.QueryRowContext(ctx, getActiveAccessToDatasetForSubject, arg.DatasetID, arg.Subject)
	var i DatasetAccessView
	err := row.Scan(
		&i.AccessID,
		&i.AccessSubject,
		&i.AccessOwner,
		&i.AccessGranter,
		&i.AccessExpires,
		&i.AccessCreated,
		&i.AccessRevoked,
		&i.AccessDatasetID,
		&i.AccessRequestID,
		&i.AccessRequestOwner,
		&i.AccessRequestSubject,
		&i.AccessRequestLastModified,
		&i.AccessRequestCreated,
		&i.AccessRequestExpires,
		&i.AccessRequestStatus,
		&i.AccessRequestClosed,
		&i.AccessRequestGranter,
		&i.AccessRequestReason,
		&i.PollyID,
		&i.PollyName,
		&i.PollyUrl,
		&i.PollyExternalID,
	)
	return i, err
}

const grantAccessToDataset = `-- name: GrantAccessToDataset :exec
INSERT INTO dataset_access (dataset_id,
                            "subject",
                            "owner",
                            granter,
                            expires,
                            access_request_id)
VALUES ($1,
        $2,
        $3,
        LOWER($4),
        $5,
        $6)
`

type GrantAccessToDatasetParams struct {
	DatasetID       uuid.UUID
	Subject         string
	Owner           string
	Granter         string
	Expires         sql.NullTime
	AccessRequestID uuid.NullUUID
}

func (q *Queries) GrantAccessToDataset(ctx context.Context, arg GrantAccessToDatasetParams) error {
	_, err := q.db.ExecContext(ctx, grantAccessToDataset,
		arg.DatasetID,
		arg.Subject,
		arg.Owner,
		arg.Granter,
		arg.Expires,
		arg.AccessRequestID,
	)
	return err
}

const listAccessToDataset = `-- name: ListAccessToDataset :many
SELECT access_id, access_subject, access_owner, access_granter, access_expires, access_created, access_revoked, access_dataset_id, access_request_id, access_request_owner, access_request_subject, access_request_last_modified, access_request_created, access_request_expires, access_request_status, access_request_closed, access_request_granter, access_request_reason, polly_id, polly_name, polly_url, polly_external_id
FROM dataset_access_view
WHERE access_dataset_id = $1
`

func (q *Queries) ListAccessToDataset(ctx context.Context, datasetID uuid.UUID) ([]DatasetAccessView, error) {
	rows, err := q.db.QueryContext(ctx, listAccessToDataset, datasetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DatasetAccessView{}
	for rows.Next() {
		var i DatasetAccessView
		if err := rows.Scan(
			&i.AccessID,
			&i.AccessSubject,
			&i.AccessOwner,
			&i.AccessGranter,
			&i.AccessExpires,
			&i.AccessCreated,
			&i.AccessRevoked,
			&i.AccessDatasetID,
			&i.AccessRequestID,
			&i.AccessRequestOwner,
			&i.AccessRequestSubject,
			&i.AccessRequestLastModified,
			&i.AccessRequestCreated,
			&i.AccessRequestExpires,
			&i.AccessRequestStatus,
			&i.AccessRequestClosed,
			&i.AccessRequestGranter,
			&i.AccessRequestReason,
			&i.PollyID,
			&i.PollyName,
			&i.PollyUrl,
			&i.PollyExternalID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listActiveAccessToDataset = `-- name: ListActiveAccessToDataset :many
SELECT access_id, access_subject, access_owner, access_granter, access_expires, access_created, access_revoked, access_dataset_id, access_request_id, access_request_owner, access_request_subject, access_request_last_modified, access_request_created, access_request_expires, access_request_status, access_request_closed, access_request_granter, access_request_reason, polly_id, polly_name, polly_url, polly_external_id
FROM dataset_access_view
WHERE access_dataset_id = $1 AND access_revoked IS NULL AND (access_expires IS NULL OR access_expires >= NOW())
`

func (q *Queries) ListActiveAccessToDataset(ctx context.Context, datasetID uuid.UUID) ([]DatasetAccessView, error) {
	rows, err := q.db.QueryContext(ctx, listActiveAccessToDataset, datasetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DatasetAccessView{}
	for rows.Next() {
		var i DatasetAccessView
		if err := rows.Scan(
			&i.AccessID,
			&i.AccessSubject,
			&i.AccessOwner,
			&i.AccessGranter,
			&i.AccessExpires,
			&i.AccessCreated,
			&i.AccessRevoked,
			&i.AccessDatasetID,
			&i.AccessRequestID,
			&i.AccessRequestOwner,
			&i.AccessRequestSubject,
			&i.AccessRequestLastModified,
			&i.AccessRequestCreated,
			&i.AccessRequestExpires,
			&i.AccessRequestStatus,
			&i.AccessRequestClosed,
			&i.AccessRequestGranter,
			&i.AccessRequestReason,
			&i.PollyID,
			&i.PollyName,
			&i.PollyUrl,
			&i.PollyExternalID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUnrevokedExpiredAccessEntries = `-- name: ListUnrevokedExpiredAccessEntries :many
SELECT access_id, access_subject, access_owner, access_granter, access_expires, access_created, access_revoked, access_dataset_id, access_request_id, access_request_owner, access_request_subject, access_request_last_modified, access_request_created, access_request_expires, access_request_status, access_request_closed, access_request_granter, access_request_reason, polly_id, polly_name, polly_url, polly_external_id
FROM dataset_access_view
WHERE access_revoked IS NULL
  AND access_expires < NOW()
`

func (q *Queries) ListUnrevokedExpiredAccessEntries(ctx context.Context) ([]DatasetAccessView, error) {
	rows, err := q.db.QueryContext(ctx, listUnrevokedExpiredAccessEntries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DatasetAccessView{}
	for rows.Next() {
		var i DatasetAccessView
		if err := rows.Scan(
			&i.AccessID,
			&i.AccessSubject,
			&i.AccessOwner,
			&i.AccessGranter,
			&i.AccessExpires,
			&i.AccessCreated,
			&i.AccessRevoked,
			&i.AccessDatasetID,
			&i.AccessRequestID,
			&i.AccessRequestOwner,
			&i.AccessRequestSubject,
			&i.AccessRequestLastModified,
			&i.AccessRequestCreated,
			&i.AccessRequestExpires,
			&i.AccessRequestStatus,
			&i.AccessRequestClosed,
			&i.AccessRequestGranter,
			&i.AccessRequestReason,
			&i.PollyID,
			&i.PollyName,
			&i.PollyUrl,
			&i.PollyExternalID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const revokeAccessToDataset = `-- name: RevokeAccessToDataset :exec
UPDATE dataset_access
SET revoked = NOW()
WHERE id = $1
`

func (q *Queries) RevokeAccessToDataset(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, revokeAccessToDataset, id)
	return err
}
