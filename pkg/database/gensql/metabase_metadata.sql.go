// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: metabase_metadata.sql

package gensql

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createRestrictedMetabaseMetadata = `-- name: CreateRestrictedMetabaseMetadata :exec
INSERT INTO restricted_metabase_metadata (
    "dataset_id"
) VALUES (
    $1
)
`

func (q *Queries) CreateRestrictedMetabaseMetadata(ctx context.Context, datasetID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, createRestrictedMetabaseMetadata, datasetID)
	return err
}

const deleteRestrictedMetabaseMetadata = `-- name: DeleteRestrictedMetabaseMetadata :exec
DELETE 
FROM restricted_metabase_metadata
WHERE "dataset_id" = $1
`

func (q *Queries) DeleteRestrictedMetabaseMetadata(ctx context.Context, datasetID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteRestrictedMetabaseMetadata, datasetID)
	return err
}

const getAllRestrictedMetabaseMetadata = `-- name: GetAllRestrictedMetabaseMetadata :many
SELECT database_id, permission_group_id, sa_email, collection_id, deleted_at, dataset_id, sync_completed, sa_private_key
FROM restricted_metabase_metadata
`

func (q *Queries) GetAllRestrictedMetabaseMetadata(ctx context.Context) ([]RestrictedMetabaseMetadatum, error) {
	rows, err := q.db.QueryContext(ctx, getAllRestrictedMetabaseMetadata)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []RestrictedMetabaseMetadatum{}
	for rows.Next() {
		var i RestrictedMetabaseMetadatum
		if err := rows.Scan(
			&i.DatabaseID,
			&i.PermissionGroupID,
			&i.SaEmail,
			&i.CollectionID,
			&i.DeletedAt,
			&i.DatasetID,
			&i.SyncCompleted,
			&i.SaPrivateKey,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOpenMetabaseTablesInSameBigQueryDataset = `-- name: GetOpenMetabaseTablesInSameBigQueryDataset :many
WITH sources_in_same_dataset AS (
  SELECT dataset_id, project_id, dataset, table_name, schema, last_modified, created, expires, table_type, description, pii_tags, missing_since, id, is_reference, pseudo_columns, deleted FROM datasource_bigquery 
  WHERE project_id = $1 AND dataset = $2
)

SELECT table_name FROM sources_in_same_dataset sds
JOIN open_metabase_metadata mbm
ON mbm.dataset_id = sds.dataset_id
`

type GetOpenMetabaseTablesInSameBigQueryDatasetParams struct {
	ProjectID string
	Dataset   string
}

func (q *Queries) GetOpenMetabaseTablesInSameBigQueryDataset(ctx context.Context, arg GetOpenMetabaseTablesInSameBigQueryDatasetParams) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getOpenMetabaseTablesInSameBigQueryDataset, arg.ProjectID, arg.Dataset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var table_name string
		if err := rows.Scan(&table_name); err != nil {
			return nil, err
		}
		items = append(items, table_name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRestrictedMetabaseMetadata = `-- name: GetRestrictedMetabaseMetadata :one
SELECT database_id, permission_group_id, sa_email, collection_id, deleted_at, dataset_id, sync_completed, sa_private_key
FROM restricted_metabase_metadata
WHERE "dataset_id" = $1 AND "deleted_at" IS NULL
`

func (q *Queries) GetRestrictedMetabaseMetadata(ctx context.Context, datasetID uuid.UUID) (RestrictedMetabaseMetadatum, error) {
	row := q.db.QueryRowContext(ctx, getRestrictedMetabaseMetadata, datasetID)
	var i RestrictedMetabaseMetadatum
	err := row.Scan(
		&i.DatabaseID,
		&i.PermissionGroupID,
		&i.SaEmail,
		&i.CollectionID,
		&i.DeletedAt,
		&i.DatasetID,
		&i.SyncCompleted,
		&i.SaPrivateKey,
	)
	return i, err
}

const getRestrictedMetabaseMetadataWithDeleted = `-- name: GetRestrictedMetabaseMetadataWithDeleted :one
SELECT database_id, permission_group_id, sa_email, collection_id, deleted_at, dataset_id, sync_completed, sa_private_key
FROM restricted_metabase_metadata
WHERE "dataset_id" = $1
`

func (q *Queries) GetRestrictedMetabaseMetadataWithDeleted(ctx context.Context, datasetID uuid.UUID) (RestrictedMetabaseMetadatum, error) {
	row := q.db.QueryRowContext(ctx, getRestrictedMetabaseMetadataWithDeleted, datasetID)
	var i RestrictedMetabaseMetadatum
	err := row.Scan(
		&i.DatabaseID,
		&i.PermissionGroupID,
		&i.SaEmail,
		&i.CollectionID,
		&i.DeletedAt,
		&i.DatasetID,
		&i.SyncCompleted,
		&i.SaPrivateKey,
	)
	return i, err
}

const setCollectionRestrictedMetabaseMetadata = `-- name: SetCollectionRestrictedMetabaseMetadata :one
UPDATE restricted_metabase_metadata
SET "collection_id" = $1
WHERE dataset_id = $2
RETURNING database_id, permission_group_id, sa_email, collection_id, deleted_at, dataset_id, sync_completed, sa_private_key
`

type SetCollectionRestrictedMetabaseMetadataParams struct {
	CollectionID sql.NullInt32
	DatasetID    uuid.UUID
}

func (q *Queries) SetCollectionRestrictedMetabaseMetadata(ctx context.Context, arg SetCollectionRestrictedMetabaseMetadataParams) (RestrictedMetabaseMetadatum, error) {
	row := q.db.QueryRowContext(ctx, setCollectionRestrictedMetabaseMetadata, arg.CollectionID, arg.DatasetID)
	var i RestrictedMetabaseMetadatum
	err := row.Scan(
		&i.DatabaseID,
		&i.PermissionGroupID,
		&i.SaEmail,
		&i.CollectionID,
		&i.DeletedAt,
		&i.DatasetID,
		&i.SyncCompleted,
		&i.SaPrivateKey,
	)
	return i, err
}

const setDatabaseRestrictedMetabaseMetadata = `-- name: SetDatabaseRestrictedMetabaseMetadata :one
UPDATE restricted_metabase_metadata
SET "database_id" = $1
WHERE dataset_id = $2
RETURNING database_id, permission_group_id, sa_email, collection_id, deleted_at, dataset_id, sync_completed, sa_private_key
`

type SetDatabaseRestrictedMetabaseMetadataParams struct {
	DatabaseID sql.NullInt32
	DatasetID  uuid.UUID
}

func (q *Queries) SetDatabaseRestrictedMetabaseMetadata(ctx context.Context, arg SetDatabaseRestrictedMetabaseMetadataParams) (RestrictedMetabaseMetadatum, error) {
	row := q.db.QueryRowContext(ctx, setDatabaseRestrictedMetabaseMetadata, arg.DatabaseID, arg.DatasetID)
	var i RestrictedMetabaseMetadatum
	err := row.Scan(
		&i.DatabaseID,
		&i.PermissionGroupID,
		&i.SaEmail,
		&i.CollectionID,
		&i.DeletedAt,
		&i.DatasetID,
		&i.SyncCompleted,
		&i.SaPrivateKey,
	)
	return i, err
}

const setPermissionGroupRestrictedMetabaseMetadata = `-- name: SetPermissionGroupRestrictedMetabaseMetadata :one
UPDATE restricted_metabase_metadata
SET "permission_group_id" = $1
WHERE dataset_id = $2
RETURNING database_id, permission_group_id, sa_email, collection_id, deleted_at, dataset_id, sync_completed, sa_private_key
`

type SetPermissionGroupRestrictedMetabaseMetadataParams struct {
	PermissionGroupID sql.NullInt32
	DatasetID         uuid.UUID
}

func (q *Queries) SetPermissionGroupRestrictedMetabaseMetadata(ctx context.Context, arg SetPermissionGroupRestrictedMetabaseMetadataParams) (RestrictedMetabaseMetadatum, error) {
	row := q.db.QueryRowContext(ctx, setPermissionGroupRestrictedMetabaseMetadata, arg.PermissionGroupID, arg.DatasetID)
	var i RestrictedMetabaseMetadatum
	err := row.Scan(
		&i.DatabaseID,
		&i.PermissionGroupID,
		&i.SaEmail,
		&i.CollectionID,
		&i.DeletedAt,
		&i.DatasetID,
		&i.SyncCompleted,
		&i.SaPrivateKey,
	)
	return i, err
}

const setServiceAccountPrivateKeyRestrictedMetabaseMetadata = `-- name: SetServiceAccountPrivateKeyRestrictedMetabaseMetadata :one
UPDATE restricted_metabase_metadata
SET "sa_private_key" = $1
WHERE dataset_id = $2
RETURNING database_id, permission_group_id, sa_email, collection_id, deleted_at, dataset_id, sync_completed, sa_private_key
`

type SetServiceAccountPrivateKeyRestrictedMetabaseMetadataParams struct {
	SaPrivateKey []byte
	DatasetID    uuid.UUID
}

func (q *Queries) SetServiceAccountPrivateKeyRestrictedMetabaseMetadata(ctx context.Context, arg SetServiceAccountPrivateKeyRestrictedMetabaseMetadataParams) (RestrictedMetabaseMetadatum, error) {
	row := q.db.QueryRowContext(ctx, setServiceAccountPrivateKeyRestrictedMetabaseMetadata, arg.SaPrivateKey, arg.DatasetID)
	var i RestrictedMetabaseMetadatum
	err := row.Scan(
		&i.DatabaseID,
		&i.PermissionGroupID,
		&i.SaEmail,
		&i.CollectionID,
		&i.DeletedAt,
		&i.DatasetID,
		&i.SyncCompleted,
		&i.SaPrivateKey,
	)
	return i, err
}

const setServiceAccountRestrictedMetabaseMetadata = `-- name: SetServiceAccountRestrictedMetabaseMetadata :one
UPDATE restricted_metabase_metadata
SET "sa_email" = $1
WHERE dataset_id = $2
RETURNING database_id, permission_group_id, sa_email, collection_id, deleted_at, dataset_id, sync_completed, sa_private_key
`

type SetServiceAccountRestrictedMetabaseMetadataParams struct {
	SaEmail   string
	DatasetID uuid.UUID
}

func (q *Queries) SetServiceAccountRestrictedMetabaseMetadata(ctx context.Context, arg SetServiceAccountRestrictedMetabaseMetadataParams) (RestrictedMetabaseMetadatum, error) {
	row := q.db.QueryRowContext(ctx, setServiceAccountRestrictedMetabaseMetadata, arg.SaEmail, arg.DatasetID)
	var i RestrictedMetabaseMetadatum
	err := row.Scan(
		&i.DatabaseID,
		&i.PermissionGroupID,
		&i.SaEmail,
		&i.CollectionID,
		&i.DeletedAt,
		&i.DatasetID,
		&i.SyncCompleted,
		&i.SaPrivateKey,
	)
	return i, err
}

const setSyncCompletedRestrictedMetabaseMetadata = `-- name: SetSyncCompletedRestrictedMetabaseMetadata :exec
UPDATE restricted_metabase_metadata
SET "sync_completed" = NOW()
WHERE dataset_id = $1
`

func (q *Queries) SetSyncCompletedRestrictedMetabaseMetadata(ctx context.Context, datasetID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, setSyncCompletedRestrictedMetabaseMetadata, datasetID)
	return err
}
