// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: workstations.sql

package gensql

import (
	"context"
	"database/sql"
	"encoding/json"

	"github.com/lib/pq"
)

const createWorkstationsActivityHistory = `-- name: CreateWorkstationsActivityHistory :exec
INSERT INTO workstations_activity_history (
    "nav_ident",
    "action",
    "instance_id"
)
VALUES (
    $1,
    $2,
    $3
)
`

type CreateWorkstationsActivityHistoryParams struct {
	NavIdent   string
	Action     string
	InstanceID sql.NullString
}

func (q *Queries) CreateWorkstationsActivityHistory(ctx context.Context, arg CreateWorkstationsActivityHistoryParams) error {
	_, err := q.db.ExecContext(ctx, createWorkstationsActivityHistory, arg.NavIdent, arg.Action, arg.InstanceID)
	return err
}

const createWorkstationsConfigChange = `-- name: CreateWorkstationsConfigChange :exec
INSERT INTO workstations_config_history (
    "nav_ident", 
    "workstation_config"
)
VALUES (
    $1,
    $2
)
`

type CreateWorkstationsConfigChangeParams struct {
	NavIdent          string
	WorkstationConfig json.RawMessage
}

func (q *Queries) CreateWorkstationsConfigChange(ctx context.Context, arg CreateWorkstationsConfigChangeParams) error {
	_, err := q.db.ExecContext(ctx, createWorkstationsConfigChange, arg.NavIdent, arg.WorkstationConfig)
	return err
}

const createWorkstationsOnpremAllowlistChange = `-- name: CreateWorkstationsOnpremAllowlistChange :exec
INSERT INTO workstations_onprem_allowlist_history (
    "nav_ident", 
    "hosts"
)
VALUES (
    $1,
    $2
)
`

type CreateWorkstationsOnpremAllowlistChangeParams struct {
	NavIdent string
	Hosts    []string
}

func (q *Queries) CreateWorkstationsOnpremAllowlistChange(ctx context.Context, arg CreateWorkstationsOnpremAllowlistChangeParams) error {
	_, err := q.db.ExecContext(ctx, createWorkstationsOnpremAllowlistChange, arg.NavIdent, pq.Array(arg.Hosts))
	return err
}

const createWorkstationsURLListChange = `-- name: CreateWorkstationsURLListChange :exec
INSERT INTO workstations_url_list_history (
    "nav_ident", 
    "url_list",
    "disable_global_url_list"
)
VALUES (
    $1,
    $2,
    $3
)
`

type CreateWorkstationsURLListChangeParams struct {
	NavIdent             string
	UrlList              string
	DisableGlobalUrlList bool
}

func (q *Queries) CreateWorkstationsURLListChange(ctx context.Context, arg CreateWorkstationsURLListChangeParams) error {
	_, err := q.db.ExecContext(ctx, createWorkstationsURLListChange, arg.NavIdent, arg.UrlList, arg.DisableGlobalUrlList)
	return err
}

const getLastWorkstationsOnpremAllowlistChange = `-- name: GetLastWorkstationsOnpremAllowlistChange :one
SELECT 
    id, nav_ident, created_at, hosts 
FROM workstations_onprem_allowlist_history
WHERE nav_ident = $1
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetLastWorkstationsOnpremAllowlistChange(ctx context.Context, navIdent string) (WorkstationsOnpremAllowlistHistory, error) {
	row := q.db.QueryRowContext(ctx, getLastWorkstationsOnpremAllowlistChange, navIdent)
	var i WorkstationsOnpremAllowlistHistory
	err := row.Scan(
		&i.ID,
		&i.NavIdent,
		&i.CreatedAt,
		pq.Array(&i.Hosts),
	)
	return i, err
}

const getLastWorkstationsURLListChange = `-- name: GetLastWorkstationsURLListChange :one
SELECT
    id, nav_ident, created_at, url_list, disable_global_url_list
FROM workstations_url_list_history
WHERE nav_ident = $1
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetLastWorkstationsURLListChange(ctx context.Context, navIdent string) (WorkstationsUrlListHistory, error) {
	row := q.db.QueryRowContext(ctx, getLastWorkstationsURLListChange, navIdent)
	var i WorkstationsUrlListHistory
	err := row.Scan(
		&i.ID,
		&i.NavIdent,
		&i.CreatedAt,
		&i.UrlList,
		&i.DisableGlobalUrlList,
	)
	return i, err
}

const getWorkstationsURLListForIdent = `-- name: GetWorkstationsURLListForIdent :many
SELECT
    id, nav_ident, created_at, expires_at, url, duration, description
FROM workstations_url_lists
WHERE nav_ident = $1
ORDER BY created_at DESC
`

func (q *Queries) GetWorkstationsURLListForIdent(ctx context.Context, navIdent string) ([]WorkstationsUrlList, error) {
	rows, err := q.db.QueryContext(ctx, getWorkstationsURLListForIdent, navIdent)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WorkstationsUrlList{}
	for rows.Next() {
		var i WorkstationsUrlList
		if err := rows.Scan(
			&i.ID,
			&i.NavIdent,
			&i.CreatedAt,
			&i.ExpiresAt,
			&i.Url,
			&i.Duration,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
